<roblox version="4">
  <Item class="Folder" referent="0">
    <Properties>
      <string name="Name">roblox-testservice-watcher</string>
    </Properties>
    <Item class="Folder" referent="1">
      <Properties>
        <string name="Name">modules</string>
      </Properties>
      <Item class="ModuleScript" referent="2">
        <Properties>
          <string name="Name">ModuleCache</string>
          <string name="Source"><![CDATA[local getEnv = require(script.Parent.getEnv)

local cache = {}

local function validateValues(returnValues)
    for key in pairs(returnValues) do
        if key ~= 1 and key ~= 2 then
            return false
        end
    end

    return returnValues[2] and true or false
end

local function accessModule(moduleScript)
    local returnValues = cache[moduleScript]

    local success = returnValues[1]
    local result = returnValues[2]

    assert(success, "Requested module experienced an error while loading")
    assert(validateValues(returnValues), "Module code did not return exactly one value")

    return result
end

local ModuleCache = {}

function ModuleCache.require(moduleScript)
    assert(moduleScript:IsA("ModuleScript"), "Attempted to call require with invalid argument(s).")

    if cache[moduleScript] then
        return accessModule(moduleScript)
    end

    local moduleFn = loadstring(moduleScript.Source)
    local env = getEnv(moduleScript)
    env.require = ModuleCache.require

    setfenv(moduleFn, env)

    local returnValues = {pcall(moduleFn)}

    cache[moduleScript] = returnValues

    return accessModule(moduleScript)
end

function ModuleCache.clear()
    cache = {}
end

return ModuleCache
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="3">
        <Properties>
          <string name="Name">Watcher</string>
          <string name="Source"><![CDATA[local runTests = require(script.Parent.runTests)

local connections = {}

local Watcher = {}

function Watcher.addInstance(instance)
    if connections[instance] then
        return
    end

    local sourceConnection, childAddedConnection, removedConnection

    if instance:IsA("LuaSourceContainer") then
        local sourceEvent = instance:GetPropertyChangedSignal("Source")

        sourceConnection =
            sourceEvent:Connect(
            function()
                runTests()
            end
        )
    end

    local children = instance:GetChildren()
    for _, child in ipairs(children) do
        Watcher.addInstance(child)
    end

    childAddedConnection = instance.ChildAdded:Connect(Watcher.addInstance)

    removedConnection =
        instance.AncestryChanged:Connect(
        function(_, newParent)
            if not newParent then
                Watcher.removeInstance(instance)
            end
        end
    )

    connections[instance] = {
        sourceConnection,
        childAddedConnection,
        removedConnection
    }

    runTests()
end

function Watcher.removeInstance(instance)
    local instanceConnections = connections[instance]

    for _, connection in pairs(instanceConnections) do
        connection:Disconnect()
    end

    connections[instance] = nil
end

function Watcher.removeAll()
    for instance in pairs(connections) do
        Watcher.removeInstance(instance)
    end

    connections = {}
end

return Watcher
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="4">
        <Properties>
          <string name="Name">getEnv</string>
          <string name="Source"><![CDATA[local baseEnv = getfenv()

return function(scriptRelativeTo)
    local newEnv = {}

    setmetatable(
        newEnv,
        {
            __index = function(_, key)
                if key ~= "plugin" then
                    return baseEnv[key]
                end
            end
        }
    )

    newEnv.script = scriptRelativeTo

    return newEnv
end
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="5">
        <Properties>
          <string name="Name">runTests</string>
          <string name="Source"><![CDATA[local TestService = game:GetService("TestService")

local getEnv = require(script.Parent.getEnv)
local ModuleCache = require(script.Parent.ModuleCache)

return function()
    ModuleCache.clear()

    local scripts = TestService:GetChildren()

    for _, scriptObject in ipairs(scripts) do
        local scriptFn = loadstring(scriptObject.Source)

        local env = getEnv(scriptObject)
        env.require = ModuleCache.require

        setfenv(scriptFn, env)

        local success, result = pcall(scriptFn)
        if not success then
            error(string.format("Error running TestService Script %s: %s", scriptObject:GetFullName(), result))
        end
    end
end
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="6">
        <Properties>
          <string name="Name">updateDirectories</string>
          <string name="Source"><![CDATA[local Watcher = require(script.Parent.Watcher)
local runTests = require(script.Parent.runTests)

local connection

local function updateDirectories(directoriesModule)
    local directories = loadstring(directoriesModule.Source)()

    Watcher.removeAll()

    for _, instance in ipairs(directories) do
        Watcher.addInstance(instance)
    end

    local sourceEvent = directoriesModule:GetPropertyChangedSignal("Source")

    if connection then
        connection:Disconnect()
    end

    connection =
        sourceEvent:Connect(
        function()
            updateDirectories(directoriesModule)
        end
    )
end

return updateDirectories
]]></string>
        </Properties>
      </Item>
    </Item>
    <Item class="Script" referent="7">
      <Properties>
        <string name="Name">plugin</string>
        <string name="Source"><![CDATA[local TestService = game:GetService("TestService")

local updateDirectories = require(script.Parent.modules.updateDirectories)

local DIRECTORIES_MODULE_NAME = "__WatcherDirectories"

local directoriesModule = TestService:FindFirstChild(DIRECTORIES_MODULE_NAME)

if directoriesModule then
    updateDirectories(directoriesModule)
end

TestService.ChildAdded:Connect(
    function(child)
        if child.Name == DIRECTORIES_MODULE_NAME then
            updateDirectories(child)
        end
    end
)
]]></string>
      </Properties>
    </Item>
  </Item>
</roblox>